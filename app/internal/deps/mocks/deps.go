// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source deps.go -destination=mocks/deps.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	prometheus "github.com/prometheus/client_golang/prometheus"
	entity "github.com/timurzdev/mentorship-test-task/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockLogger) Error(ctx context.Context, err error, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, err}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(ctx, err any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, err}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(ctx context.Context, message string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(ctx, message any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
	isgomock struct{}
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// GetCounter mocks base method.
func (m *MockMetrics) GetCounter(key string) (*prometheus.CounterVec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", key)
	ret0, _ := ret[0].(*prometheus.CounterVec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockMetricsMockRecorder) GetCounter(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockMetrics)(nil).GetCounter), key)
}

// GetHistogram mocks base method.
func (m *MockMetrics) GetHistogram(key string) (*prometheus.HistogramVec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistogram", key)
	ret0, _ := ret[0].(*prometheus.HistogramVec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistogram indicates an expected call of GetHistogram.
func (mr *MockMetricsMockRecorder) GetHistogram(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistogram", reflect.TypeOf((*MockMetrics)(nil).GetHistogram), key)
}

// RegisterCounter mocks base method.
func (m *MockMetrics) RegisterCounter(key string, c *prometheus.CounterVec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCounter", key, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterCounter indicates an expected call of RegisterCounter.
func (mr *MockMetricsMockRecorder) RegisterCounter(key, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCounter", reflect.TypeOf((*MockMetrics)(nil).RegisterCounter), key, c)
}

// RegisterHistogram mocks base method.
func (m *MockMetrics) RegisterHistogram(key string, c *prometheus.HistogramVec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHistogram", key, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterHistogram indicates an expected call of RegisterHistogram.
func (mr *MockMetricsMockRecorder) RegisterHistogram(key, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHistogram", reflect.TypeOf((*MockMetrics)(nil).RegisterHistogram), key, c)
}

// MockRolesProvider is a mock of RolesProvider interface.
type MockRolesProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRolesProviderMockRecorder
	isgomock struct{}
}

// MockRolesProviderMockRecorder is the mock recorder for MockRolesProvider.
type MockRolesProviderMockRecorder struct {
	mock *MockRolesProvider
}

// NewMockRolesProvider creates a new mock instance.
func NewMockRolesProvider(ctrl *gomock.Controller) *MockRolesProvider {
	mock := &MockRolesProvider{ctrl: ctrl}
	mock.recorder = &MockRolesProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolesProvider) EXPECT() *MockRolesProviderMockRecorder {
	return m.recorder
}

// GetRole mocks base method.
func (m *MockRolesProvider) GetRole(ctx context.Context) (entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx)
	ret0, _ := ret[0].(entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockRolesProviderMockRecorder) GetRole(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRolesProvider)(nil).GetRole), ctx)
}

// SetRole mocks base method.
func (m *MockRolesProvider) SetRole(ctx context.Context, role entity.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRole indicates an expected call of SetRole.
func (mr *MockRolesProviderMockRecorder) SetRole(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRole", reflect.TypeOf((*MockRolesProvider)(nil).SetRole), ctx, role)
}

// MockRolesReader is a mock of RolesReader interface.
type MockRolesReader struct {
	ctrl     *gomock.Controller
	recorder *MockRolesReaderMockRecorder
	isgomock struct{}
}

// MockRolesReaderMockRecorder is the mock recorder for MockRolesReader.
type MockRolesReaderMockRecorder struct {
	mock *MockRolesReader
}

// NewMockRolesReader creates a new mock instance.
func NewMockRolesReader(ctrl *gomock.Controller) *MockRolesReader {
	mock := &MockRolesReader{ctrl: ctrl}
	mock.recorder = &MockRolesReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolesReader) EXPECT() *MockRolesReaderMockRecorder {
	return m.recorder
}

// GetRole mocks base method.
func (m *MockRolesReader) GetRole(ctx context.Context) (entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx)
	ret0, _ := ret[0].(entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockRolesReaderMockRecorder) GetRole(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRolesReader)(nil).GetRole), ctx)
}

// MockRolesWriter is a mock of RolesWriter interface.
type MockRolesWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRolesWriterMockRecorder
	isgomock struct{}
}

// MockRolesWriterMockRecorder is the mock recorder for MockRolesWriter.
type MockRolesWriterMockRecorder struct {
	mock *MockRolesWriter
}

// NewMockRolesWriter creates a new mock instance.
func NewMockRolesWriter(ctrl *gomock.Controller) *MockRolesWriter {
	mock := &MockRolesWriter{ctrl: ctrl}
	mock.recorder = &MockRolesWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolesWriter) EXPECT() *MockRolesWriterMockRecorder {
	return m.recorder
}

// SetRole mocks base method.
func (m *MockRolesWriter) SetRole(ctx context.Context, role entity.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRole indicates an expected call of SetRole.
func (mr *MockRolesWriterMockRecorder) SetRole(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRole", reflect.TypeOf((*MockRolesWriter)(nil).SetRole), ctx, role)
}
